<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Memorandum</title>
    <link>https://nagatani.github.io/posts/</link>
    <description>Recent content in Posts on Memorandum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>&amp;copy; 2018 &lt;a href=&#34;https://nagatani.me/&#34; target=&#34;_blank&#34;&gt;Nagatani&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 13 Aug 2018 14:23:58 +0900</lastBuildDate>
    
	<atom:link href="https://nagatani.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Atomのメンテナンスでやったこと</title>
      <link>https://nagatani.github.io/posts/atom-cleanup/</link>
      <pubDate>Mon, 13 Aug 2018 14:23:58 +0900</pubDate>
      
      <guid>https://nagatani.github.io/posts/atom-cleanup/</guid>
      <description>Atomって言ってもいろいろあるけど、テキストエディタのAtomの話。 新しいプログラミング言語の開発環境を構築する際に、いつも使っているAtomのパッケージにも、「language-〇〇」とか「AutoComplete〇〇」などのパッケージを追加している。 でも、ちょっと使ってみてnot for meだったりで消したり、違うものをまた試してみたりを繰り返していると、パッケージ周りでエラーが発生してしまうこと</description>
    </item>
    
    <item>
      <title>Hugoアップデートといつも使うコマンド</title>
      <link>https://nagatani.github.io/posts/hugo-commands/</link>
      <pubDate>Wed, 25 Jul 2018 04:12:08 +0900</pubDate>
      
      <guid>https://nagatani.github.io/posts/hugo-commands/</guid>
      <description>いつも忘れるので書いとく この投稿は、完全にメモです。 Hugoバージョンアップ $ brew update $ brew upgrade hugo 新規投稿作成 $ hugo new posts/new-post.md ローカルサーバ立ち上げ $ hugo server -D デプロイ $ ./deploy.sh deploy.shの中身は↓ #!/bin/bash echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot; # Build the project. hugo -t Memorandum # if using a theme, replace with `hugo -t &amp;lt;YOURTHEME&amp;gt;` # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=&amp;quot;rebuilding site `date`&amp;quot; if [ $# -eq 1 ] then msg=&amp;quot;$1&amp;quot; fi git commit -m &amp;quot;$msg&amp;quot; # Push source and build repos. git push origin master # Come Back up to the Project Root cd ..</description>
    </item>
    
    <item>
      <title>M5StackとDHT12で作る部屋の温度湿度をIFTTTのWebhooksへ投げるやつ</title>
      <link>https://nagatani.github.io/posts/m5stack-dht12-temptoifttt/</link>
      <pubDate>Wed, 25 Jul 2018 02:43:48 +0900</pubDate>
      
      <guid>https://nagatani.github.io/posts/m5stack-dht12-temptoifttt/</guid>
      <description>タイトルの通りですが、作りました。 制作動機は、我が家のリビングがめっちゃ暑いのと、我が家のネコたちが暑さでぐったりしているのがかわいそうというのがあります。で、先月ぐらいに買って、そのうちなにか作ろうとしていた M5Stack Basic と 温湿度センサのDHT12がセットになったプロトキットがあったので、これで作るか、となった次第です。 やりたかったことは、リビングが指定された温度以上になった場合に、Slackへ通知するシ</description>
    </item>
    
    <item>
      <title>TomlデータをJSONに変換する</title>
      <link>https://nagatani.github.io/posts/node-toml-to-json/</link>
      <pubDate>Sat, 30 Jun 2018 23:00:00 +0900</pubDate>
      
      <guid>https://nagatani.github.io/posts/node-toml-to-json/</guid>
      <description>作りました。 Nagatani/toml2json: TomlファイルをJSONファイルに変換します。 なんで作ったかと言うと、JSONデータでの設定ファイルの場合、コメントが残せないという愚痴を聞いて、tomlで設定ファイル書いてデプロイスクリプトのにJSONデータに変換すれば良くないか？と普通に疑問に思ったからですね。 で、何してるかというと、npmのtoml 使うと、tomlファイルをJavaScriptのオブジェクトにパースできるので</description>
    </item>
    
    <item>
      <title>Twitterを過去に遡って検索してデータを取得するやつ作った</title>
      <link>https://nagatani.github.io/posts/tweet-search-from-web/</link>
      <pubDate>Wed, 30 May 2018 23:30:36 +0900</pubDate>
      
      <guid>https://nagatani.github.io/posts/tweet-search-from-web/</guid>
      <description>APIの仕様変更にうんざりしている皆様こんにちは。 ↓まぁこんなことがあったので、日頃の情報収集のツールから検索の部分だけ取り出して加筆修正したのを公開しました。 Twitter APIでの検索が過去7日だっけかの制限があるから過去データ検索できないっつってる人いたんだけど、Twitter Webでの検索は日付の制限ないの教えてあげれば良かったかなって &amp;mdash; ながたに🐈 (@Nagatani) May 30, 2018 SeleniumでもNightmare.jsで</description>
    </item>
    
    <item>
      <title>CSSで何となくランダムっぽいスタイルを作る</title>
      <link>https://nagatani.github.io/posts/css-pseudo-random/</link>
      <pubDate>Tue, 08 May 2018 08:28:45 +0900</pubDate>
      
      <guid>https://nagatani.github.io/posts/css-pseudo-random/</guid>
      <description>pure CSSにはrandom()がない SCSSとかにはある。 何らかの理由で、random()関数がある便利なツールが使えない場合にCSSのみでそれっぽく見せる方法を書き残しておく。 サンプルコード HTML &amp;lt;div class=&amp;quot;random&amp;quot;&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; CSS 雑に必要な部分を取り出す。 .random&amp;gt;div { /* ランダム要素の共通スタイル */ width: 100px; height: 100px; } /* ↓揺らぎの設定 */ .random&amp;gt;div { background: #ff7c5c; transform: rotate(2.75deg); } .random&amp;gt;div:nth-child(2n) { background: #5cff7c; transform: rotate(-0.5deg); } .random&amp;gt;div:nth-child(3n) { background: #7c5cff; transform: rotate(-2.5deg); } .random&amp;gt;div:nth-child(5n) { background: #ffce5c; transform: rotate(1.2deg); } .random&amp;gt;div:nth-child(7n) { background: #ff5c8e; transform: rotate(5deg); } やってること :nth-</description>
    </item>
    
    <item>
      <title>Hugoのテーマ作りました。</title>
      <link>https://nagatani.github.io/posts/hugo-theme-created/</link>
      <pubDate>Sun, 06 May 2018 12:54:26 +0900</pubDate>
      
      <guid>https://nagatani.github.io/posts/hugo-theme-created/</guid>
      <description>リポジトリ Nagatani/hugo-memorandum: Memorandum - hugo theme サンプル このサイトがそれです。 hugo themeのサイトには登録されていません。 今後、もっとブラッシュアップできたら登録準備するかもしれません。 使い方 リポジトリからコピー Hugoサイトのディレクトリに以下のコマンドでコピーを作成してください。 git clone https://github.com/Nagatani/hugo-memorandum.git themes/Memorandum または、サブモジュールにしても良いです。 git submodule add https://github.com/Nagatani/hugo-memorandum.git themes/Memorandum 設定変更 (config.toml) 必要に応じて以下のサンプルから抜粋してください。 baseURL = &amp;quot;https://your-site.local/&amp;quot; languageCode = &amp;quot;ja-jp&amp;quot; title = &amp;quot;</description>
    </item>
    
    <item>
      <title>いつも使ってるブックマークレット</title>
      <link>https://nagatani.github.io/posts/bookmarklet/</link>
      <pubDate>Fri, 04 May 2018 03:19:25 +0900</pubDate>
      
      <guid>https://nagatani.github.io/posts/bookmarklet/</guid>
      <description>Chromeでしか動作確認してません。 ブックマークレットでできることはできる限りやるようにすると、余計なChrome拡張機能を追加しなくて済むのでおすすめ。 ブックマークレットの作り方をわざわざ説明するのめんどいので使いたいひとは調べよう。 今見ているWebサイトをTwitterで共有するブックマークレット TwitterへのWebページ共有はコレを使ってる。「見てる」ってのは、「見てる」のであって読ん</description>
    </item>
    
    <item>
      <title>MacOSでマイク入力をそのままビルトインオーディオに出力するには</title>
      <link>https://nagatani.github.io/posts/mac-audio-thru/</link>
      <pubDate>Wed, 02 May 2018 18:00:18 +0900</pubDate>
      
      <guid>https://nagatani.github.io/posts/mac-audio-thru/</guid>
      <description>標準機能ではできません！ 滅べ。 調べた限りでは 何年か前のMacOSではできていたようなのですが、使用しているMacOS Sierraではできなくなってしまったようですね。 そもそも なんでこの機能が欲しいかって言うと、講師業で使用したいからなんです。 講義室にあるマイクは、手持ちしかなく、ピンマイクのような便利なものはありません。(そもそもこれが発端じゃないか……ピンマイク買ってくれよ……。) 手持ちのマイク</description>
    </item>
    
    <item>
      <title>HexoからHugoへ切り替え</title>
      <link>https://nagatani.github.io/posts/my-first-post/</link>
      <pubDate>Wed, 02 May 2018 14:30:39 +0900</pubDate>
      
      <guid>https://nagatani.github.io/posts/my-first-post/</guid>
      <description>ました。 公式サイトの手順に従ってなんやかんやしました。 コンテンツの移動もMarkdownで書いてあるものを一旦移動し、画像などはstaticディレクトリ以下へ移動した。 Markdownの変更箇所 記事のカテゴリ、タグの表記は、Hexoで書いていた以下の表記法でそのまま行けた。 categories: - Spark tags: - Java8 - Spark - Tutorial 新しい記事を書く時は、Hugoの表記に直す予定だけど、今までのは面倒なのでそのまま。 問題はパーマリンク。 こ</description>
    </item>
    
    <item>
      <title>NetBeansでSparkを使ってサクッとWebアプリケーションを作る ④JSONを返すWeb-APIの作成</title>
      <link>https://nagatani.github.io/posts/netbeans-spark-web-4/</link>
      <pubDate>Thu, 23 Jun 2016 01:42:53 +0000</pubDate>
      
      <guid>https://nagatani.github.io/posts/netbeans-spark-web-4/</guid>
      <description>今回やることのソースコード GitHubに置いておきます。 Nagatani/netbeans-spark-webapp-sample2 JSONを返すWeb APIの作成 最終的には、MySQLからデータを取得してJSON形式で返すAPIと、JavaScriptでJSONデータを取得して画面に表示するプログラムが完成する。 やることはそれほど難しいことでなく、単純にJSON変換ライブラリであるGoogleのgsonを使用してJavaのインスタンスをJSON形式に変換し、それをHT</description>
    </item>
    
    <item>
      <title>NetBeansでSparkを使ってサクッとWebアプリケーションを作る ③サーバーログの出力</title>
      <link>https://nagatani.github.io/posts/netbeans-spark-web-3/</link>
      <pubDate>Mon, 13 Jun 2016 23:34:08 +0000</pubDate>
      
      <guid>https://nagatani.github.io/posts/netbeans-spark-web-3/</guid>
      <description>前回までで、一旦Webアプリケーションの作成の基本の基本ぐらいなところまでできている。 WebアプリケーションのAPIの作成について触れていきたいところだけど、その前に、NetBeansで実行時にログの出力を有効にしておこう。 ログの出力は、サーバーとクライアントで一対多の通信を行うWebアプリケーションでは必須の機能と言えるので、今回だけでなく次回以降のプロジェクトも同様にログ出力を有効にしておこう</description>
    </item>
    
    <item>
      <title>NetBeansでSparkを使ってサクッとWebアプリケーションを作る ②テンプレートエンジンでWebページの出力</title>
      <link>https://nagatani.github.io/posts/netbeans-spark-web-2/</link>
      <pubDate>Wed, 08 Jun 2016 13:36:36 +0000</pubDate>
      
      <guid>https://nagatani.github.io/posts/netbeans-spark-web-2/</guid>
      <description>今回は、JavaのテンプレートエンジンであるFreeMarkerを使い、Sparkで作成したWebアプリケーションに、Webページの出力機能を追加する。 ※ 追記：FreeMarkerの綴り間違えてたりしてることに公開後気づいたりした。でもキャプチャとか直すの大変なのでこのままにしておく。 （やっぱり深夜にこういう記事書いちゃダメだね） SparkでのWebページ出力 SparkのWebアプリケーションでは</description>
    </item>
    
    <item>
      <title>NetBeansでSparkを使ってサクッとWebアプリケーションを作る①Hello,World!!</title>
      <link>https://nagatani.github.io/posts/netbeans-spark-web-1/</link>
      <pubDate>Wed, 01 Jun 2016 17:03:14 +0900</pubDate>
      
      <guid>https://nagatani.github.io/posts/netbeans-spark-web-1/</guid>
      <description>※この記事は、以下のブログに投稿したものと同じです。 NetBeansでSparkを使ってサクッとWebアプリケーションを作る①Hello,World!! - 水に溶けるドキュメント 書いてから数日後、そういえばこの技術関連のブログ放置してたわ…ってなったので、こっちに移動しました……。 本題 今回から、何回かに分けてJava8でかつSparkを使ってWebアプリケーションをサクッと作る方法について書く。 (こ</description>
    </item>
    
    <item>
      <title>JavaFX8でのLook and Feelを設定する</title>
      <link>https://nagatani.github.io/posts/javafx8-fxml-lookandfeel/</link>
      <pubDate>Wed, 08 Oct 2014 17:00:56 +0000</pubDate>
      
      <guid>https://nagatani.github.io/posts/javafx8-fxml-lookandfeel/</guid>
      <description>JavaFX8のLook and Feel 標準では、Modenaよ呼ばれるルック・アンド・フィールが使用されている。 これを変更することで、アプリケーション全体の外観を変える事ができる。 詳細は省く。 FXMLには、全体の外観を変更する手法として、HTMLと同様にCSSを使用することができるが、これに関してはまた後日記事にしようと思う。 メインクラスでコーディングが必要 以下、Hello Worldのアプリで作成した、Ja</description>
    </item>
    
    <item>
      <title>MacのFinederで不可視となっているディレクトリやファイルを表示する方法</title>
      <link>https://nagatani.github.io/posts/mac-finder-view-allfile/</link>
      <pubDate>Tue, 07 Oct 2014 14:40:51 +0000</pubDate>
      
      <guid>https://nagatani.github.io/posts/mac-finder-view-allfile/</guid>
      <description>ターミナル開いてls -a使え！ 嘘です。ごめん。 ls -a使えば見れるけど、Finderでも見たい。 そんなあなたに、以下のコマンドを捧げる。 ターミナル開いて、2行入れるだけ。 $ defaults write com.apple.finder AppleShowAllFiles true $ killall Finder ※killall FinderでFinderが再起動されるので一応注意すること。 戻し方も教えとく 1行目のコマンドの最後をtrueからfalseに変えるだけ。 $ defaults write com.apple.finder AppleShowAllFiles false $ killall Finder Finderでシステム関連の大事なファイル</description>
    </item>
    
    <item>
      <title>JavaFX8 FXMLでのGUIアプリケーション開発 - 事始め</title>
      <link>https://nagatani.github.io/posts/javafx8-intro/</link>
      <pubDate>Wed, 17 Sep 2014 15:11:01 +0000</pubDate>
      
      <guid>https://nagatani.github.io/posts/javafx8-intro/</guid>
      <description>今回から、JavaFX8(JavaFX on Java8)についての記事を幾つか書こうと思う。 前持って言って置かなければならないんだけど、私はJavaFXでの開発実績がない。 この記事もある程度勉強進めた段階で書いてるけど、自分がわかるように書くだけなので参考にならなくても知らんし、間違った内容もあるかもしれんし、途中で飽きたら放置するのでそのつもりでお願いします。 Java8から標準機能となったJavaF</description>
    </item>
    
    <item>
      <title>Android Studioを入れたMacBook Airでbashからadbコマンドを使えるようにする</title>
      <link>https://nagatani.github.io/posts/androidstudio-adb/</link>
      <pubDate>Sun, 14 Sep 2014 18:39:30 +0000</pubDate>
      
      <guid>https://nagatani.github.io/posts/androidstudio-adb/</guid>
      <description>なんやかんやあれやこれやでadbコマンド使わないといけなくなったので、その手順をメモしておく。 母艦のWindowsマシンには、Android SDKを手動セットアップしてたのでそれ使えば良いだけの話なんだけど、たまたま手元にあるのはMacBook Airだったので、adbコマンド使えるようにしとこう、というわけです。 前提として、Android Studioはインストール済み。 Android SDKを別途入れなくても、</description>
    </item>
    
    <item>
      <title>GitHub Pagesで運用するHexoで画像を記事内に挿入する（アップロードする）方法の最適解ってあるの？</title>
      <link>https://nagatani.github.io/posts/hexo-image-add/</link>
      <pubDate>Sat, 13 Sep 2014 03:55:09 +0000</pubDate>
      
      <guid>https://nagatani.github.io/posts/hexo-image-add/</guid>
      <description>タイトルの通りです。 Hexoで画像を挿入する方法 調べたけど、どれもしっくり来ない。 プラグインはコレジャナイ感ある。 自己流 で、自分がやってみてる方法は、 「image」ページを作成する。 作成した「image」ページのディレクトリに画像を突っ込む。 記事からは、「/image/突っ込んだ画像」で画像を参照させる。 公開するタイミングで、ページの画像もgit pushできる。 画像差し込めた。 という流れになってる</description>
    </item>
    
    <item>
      <title>Markdownで書けるCMS</title>
      <link>https://nagatani.github.io/posts/markdown-cms/</link>
      <pubDate>Fri, 12 Sep 2014 04:00:46 +0000</pubDate>
      
      <guid>https://nagatani.github.io/posts/markdown-cms/</guid>
      <description>前置き CMSについての話です。 いつもは大抵Wordpress使ってるんだけど、なんだかんだ言って更新がめんどいんですよ。 ただ私が面倒くさがりってこともあるんですが……。 講師業で使う資料作成にMarkdownをよく使うようになって、 「Markdownマジ楽。」 からの 「もうMarkdownで記事書けば良くね？」 ってなった次第です。 で、いろいろあって今このブログでHexo使ってます。 だけどこのブログは、</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://nagatani.github.io/posts/hello-world/</link>
      <pubDate>Thu, 11 Sep 2014 15:11:01 +0000</pubDate>
      
      <guid>https://nagatani.github.io/posts/hello-world/</guid>
      <description>GitHub PagesにHexo入れた。 何書くかは決めてない。 テキトーに何かしら書いていきたい。 HexoをGitHub Pagesに構築するのに参考にしたサイト Hexo と GitHub Pages でブログ環境を構築して公開する - Qiita 所要時間3分!? Github PagesとHEXOで爆速ブログ構築してみよう！ | 株式会社LIG</description>
    </item>
    
  </channel>
</rss>